{"version":3,"sources":["components/Filter.js","components/ProductList.js","services/productService.js","App.js","index.js"],"names":["Filter","productType","handleProductTypeChange","id","htmlFor","name","onChange","value","defaultValue","disabled","hidden","style","display","ProductList","productsAndAvailabilities","renderProducts","console","log","axios","interceptors","response","use","data","length","config","params","manufacturer","error","get","Promise","reject","baseUrl","all","category","then","map","productsArray","manufacturers","indexOf","push","productManufacturers","productAvailabilityPromises","productManufacturer","createProductAvailabilityPromise","serverResponses","productAvailabilityData","productAvailabilityMap","Map","i","set","products","productAvailabilities","addAvailabilityInfo","product","type","color","price","filter","availabilityObject","toUpperCase","productAvailabilityInfo","DATAPAYLOAD","substring","search","toLowerCase","availability","size","productList","App","useState","setProducts","setProductType","setProductManufacturers","useEffect","productService","productData","concat","setProductAvailabilityData","catch","setProductAvailabilityMap","setProductsAndAvailabilities","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.adb1fb57.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ( { productType, handleProductTypeChange } ) => {\n\treturn (\n\t\t<div id='filterProductsContainer'>\n\t\t\t<h2>Shows products by category type</h2>\n\t\t\t<label htmlFor='products'>\n\t\t\t\tPlease select a category. It takes some time for the selection to take effect.\n\t\t\t</label><br></br>\n\t\t\t<select name='products' onChange={ handleProductTypeChange } value={ productType }>\n\t\t\t\t<option defaultValue disabled hidden style={ { display: 'none' } } value=''></option>\n\t\t\t\t<option value='gloves'>gloves</option>\n\t\t\t\t<option value='facemasks'>facemasks</option>\n\t\t\t\t<option value='beanies'>beanies</option>\n\t\t\t</select>\n\t\t</div>\n\t)\n}\n\nexport default Filter","import React from 'react'\n\nconst ProductList = ( { productsAndAvailabilities, productType } ) => {\n\tconst renderProductList = () => {\n\t\tif( productType !== '' ) {\n\t\t\treturn (\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>id</th>\n\t\t\t\t\t\t\t<th>type</th>\n\t\t\t\t\t\t\t<th>product name</th>\n\t\t\t\t\t\t\t<th>color</th>\n\t\t\t\t\t\t\t<th>manufacturer</th>\n\t\t\t\t\t\t\t<th>price</th>\n\t\t\t\t\t\t\t<th>availability</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{ renderProducts() }\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t)\n\t\t} else return // return nothing\n\t}\n\n\tconst renderProducts = () => {\n\t\tif( productType === 'gloves' ) {\n\t\t\tconsole.log( 'productsAndAvailabilities[0] in renderProducts function:', productsAndAvailabilities[0] )\n\t\t\treturn productsAndAvailabilities[0]\n\t\t}\n\t\tif( productType === 'facemasks' ) {\n\t\t\tconsole.log( 'productsAndAvailabilities[1] in renderProducts function:', productsAndAvailabilities[1] )\n\t\t\treturn productsAndAvailabilities[1]\n\t\t}\n\t\tif( productType === 'beanies' ) {\n\t\t\tconsole.log( 'productsAndAvailabilities[2] in renderProducts function:', productsAndAvailabilities[2] )\n\t\t\treturn productsAndAvailabilities[2]\n\t\t} else return <tr><td>Loading product data. Please wait.</td></tr>\n\t}\n\n\treturn (  \n\t\t<div id='productListContainer'>\n\t\t\t{ renderProductList() }\n\t\t</div>\n\t)\n}\n\nexport default ProductList","import React from 'react'\nimport axios from 'axios'\n\n// axios response interceptor. Request is sent again if the array of server response is empty.\naxios.interceptors.response.use( response => {\n\tconst baseUrl = '/api'\n\n\tconsole.log( 'axios response interceptor:' )\n\tconsole.log( 'response in server response:', response )\n\tconsole.log( 'response.data.length in server response:', response.data.length )\n\n\tif( response.config.params.manufacturer ) {\n\t\tif( response.data.length <= 2 ) {\n\t\t\tconsole.error( \n\t\t\t\t'invalid server response detected with parameter:', response.config.params.manufacturer,\n\t\t\t\t'response.data.length:', response.data.length,\n\t\t\t\t'requesting data again...' \n\t\t\t)\n\n\t\t\treturn axios.get( baseUrl, { params: { manufacturer: response.config.params.manufacturer } } )\n\t\t}\n\t}\n\n\treturn response\n}, error => {\n\treturn Promise.reject( 'error occurred during API request:', error )\n} )\n\nconst getProducts = ( baseUrl ) => {\n\treturn Promise\n\t\t.all( [\n\t\t\taxios.get( baseUrl, { params: { category: 'gloves' } } ),\n\t\t\taxios.get( baseUrl, { params: { category: 'facemasks' } } ),\n\t\t\taxios.get( baseUrl, { params: { category: 'beanies' } } )\n\t\t] )\n\t\t.then( response => {\n\t\t\tconst allProducts = response.map( response => response.data )\n\t\t\t// allProducts contains [0]: gloves, [1]: facemasks, [2]: beanies\n\t\t\treturn allProducts\n\t\t} )\n}\n\n// Finds unique manufacturers from a long list with many duplicants.\nconst findManufacturers = productsArray => {\n\tconst manufacturers = []\n\tfor ( let manufacturer of productsArray ) {\n\t\tif ( manufacturers.indexOf( manufacturer ) === -1 ) {\n\t\t\tmanufacturers.push( manufacturer )\n\t\t}\n\t}\n\n\treturn manufacturers\n}\n\nconst getProductAvailabilityData = ( productManufacturers, baseUrl ) => {\n\tconst createProductAvailabilityPromise = ( productManufacturer ) => {\n\t\treturn axios.get( baseUrl, { params: { manufacturer: productManufacturer } } )\n\t}\n\n\tconst productAvailabilityPromises = productManufacturers.map( productManufacturer => {\n\t\treturn createProductAvailabilityPromise( productManufacturer )\n\t} )\n\n\tconsole.log( \n\t\t'1. getProductAvailabilityData(...), productAvailabilityPromises:', \n\t\tproductAvailabilityPromises \n\t)\n\n\treturn Promise\n\t\t.all( productAvailabilityPromises )\n\t\t.then( serverResponses => { \n\t\t\tconsole.log( \n\t\t\t\t'return Promise.all( productAvailabilityPromises ).then( serverResponses => {', '\\n',\n\t\t\t\t'serverResponses:', serverResponses\n\t\t\t)\n\t\t\treturn serverResponses.map( response => response.data ) \n\t\t} )\n}\n\nconst buildProductAvailabilityMap = ( productManufacturers, productAvailabilityData ) => {\n\tconst productAvailabilityMap = new Map()\n\n\tfor( let i = 0; i < productManufacturers.length; i++ ) {\n\t\tproductAvailabilityMap.set( productManufacturers[ i ], productAvailabilityData[ i ] )\n\t}\n\n\tif( typeof productAvailabilityData !== 'undefined' && productAvailabilityData.length > 0 ) {\n\t\tconsole.log( \n\t\t\t'2. buildProductAvailabilityMap(...), productAvailabilityData:', \n\t\t\tproductAvailabilityData\n\t\t)\n\t\tconsole.log(\n\t\t\t'2. buildProductAvailabilityMap(...), productAvailabilityMap:', \n\t\t\tproductAvailabilityMap\n\t\t)\n\n\t\treturn productAvailabilityMap\n\t} else {\n\t\tconsole.log(\n\t\t\t'2. buildProductAvailabilityMap(...), returning empty Map'\n\t\t)\n\n\t\treturn new Map()\n\t}\n}\n\nconst buildCompleteProductList = ( products, productAvailabilities ) => {\n\tconst addAvailabilityInfo = ( product ) => {\n\t\treturn (\n\t\t\t<tr key={ product.id }>\n\t\t\t\t<td key={ product.id }>{ product.id }</td>\n\t\t\t\t<td key={ product.type }>{ product.type }</td>\n\t\t\t\t<td key={ product.name }>{ product.name }</td>\n\t\t\t\t<td key={ product.color }>{ product.color.map( color => `${color} ` ) }</td>\n\t\t\t\t<td key={ product.manufacturer }>{ product.manufacturer }</td>\n\t\t\t\t<td key={ product.price }>{ product.price }</td>\n\t\t\t\t<td key={ product.availability }>{ productAvailabilities\n\t\t\t\t\t.get( product.manufacturer )\n\t\t\t\t\t.filter( availabilityObject => availabilityObject.id === product.id.toUpperCase() )\n\t\t\t\t\t.map( productAvailabilityInfo => {\n\t\t\t\t\t\treturn productAvailabilityInfo\n\t\t\t\t\t\t\t.DATAPAYLOAD\n\t\t\t\t\t\t\t.substring(\n\t\t\t\t\t\t\t\tproductAvailabilityInfo.DATAPAYLOAD.search( '<INSTOCKVALUE>' ) + 14,\n\t\t\t\t\t\t\t\tproductAvailabilityInfo.DATAPAYLOAD.search( '</INSTOCKVALUE>' )\n\t\t\t\t\t\t\t)\n\t\t\t\t\t} )[0].toLowerCase() }\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t)\n\t}\n\n\tif( typeof productAvailabilities !== 'undefined' && productAvailabilities.size > 0 ) {\n\t\tconsole.log(\n\t\t\t'3. buildCompleteProductList(...), productAvailabilities:', \n\t\t\tproductAvailabilities\n\t\t)\n\n\t\treturn products.map( productList => {\n\t\t\treturn productList.map( addAvailabilityInfo )\n\t\t} )\n\t} else {\n\t\tconsole.log(\n\t\t\t'3. buildCompleteProductList(...), returning Loading product data. Please wait. info text'\n\t\t)\n\n\t\treturn ( <tr><td>Loading product data. Please wait.</td></tr> )\n\t}\n}\n\nexport default { \n\tgetProducts,\n\tfindManufacturers,\n\tgetProductAvailabilityData,\n\tbuildProductAvailabilityMap,\n\tbuildCompleteProductList\n}","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport ProductList from './components/ProductList'\nimport productService from './services/productService'\nimport './css/App.css'\n\nconst App = () => {\n\tconst baseUrl = '/api'\n\t\n\tconst [ products, setProducts ] = useState( [] )\n\tconst [ productType, setProductType ] = useState ( '' )\n\tconst [ productManufacturers, setProductManufacturers ] = useState( [] )\n\t// Gets all product data (except availability).\n\tuseEffect( () => {\n\t\tproductService\n\t\t\t.getProducts( baseUrl )\n\t\t\t.then( productData => {\n\t\t\t\tsetProducts( productData )\n\n\t\t\t\t// Spreads 2-dimensional array to 1 dimension, filters out other than product manufacturer data\n\t\t\t\t// and passes the result to findManufacturers function.\n\t\t\t\tsetProductManufacturers( productService.findManufacturers( \n\t\t\t\t\t[].concat( ...productData ).map( product => product.manufacturer ) ) )\n\t\t\t} )\n\t}, [] )\n\n\tconst [ productAvailabilityData, setProductAvailabilityData ] = useState( [] )\n\t// Gets all product availability data.\n\tuseEffect( () => {\n\t\tproductService\n\t\t\t.getProductAvailabilityData( productManufacturers, baseUrl )\n\t\t\t.then( productAvailabilityData => {\n\t\t\t\tsetProductAvailabilityData( productAvailabilityData )\n\t\t\t} )\n\t\t\t.catch( error => {\n\t\t\t\tconsole.error( 'Error occurred while fetching product availability data.', error )\n\t\t\t} )\n\n\t\tconsole.log( 'product availability data useEffect, productAvailabilityData:', productAvailabilityData )\n\t}, [ productManufacturers ] )\n\n\tconst [ productAvailabilityMap, setProductAvailabilityMap ] = useState( new Map() )\n\t// Builds product availability Map data structure.\n\t// key: product manufacturer, value: product availability data\n\tuseEffect( () => { \n\t\tsetProductAvailabilityMap( productService\n\t\t\t.buildProductAvailabilityMap( productManufacturers, productAvailabilityData ) )\n\t}, [ productAvailabilityData ] )\n\n\tconst [ productsAndAvailabilities, setProductsAndAvailabilities ] = useState( [] )\n\t// Merges product and availability information.\n\tuseEffect( () => {\t\n\t\tsetProductsAndAvailabilities( productService\n\t\t\t.buildCompleteProductList( products, productAvailabilityMap )\n\t\t)\n\t}, [ productAvailabilityMap ] )\n\n\tconst handleProductTypeChange = ( event ) => {\n\t\tsetProductType( event.target.value )\n\t}\n\n\tconst renderIfThereIsProductData = () => {\n\t\tif( typeof productsAndAvailabilities !== 'undefined' && productsAndAvailabilities.length > 0 ) {\n\t\t\treturn (\n\t\t\t\t<div id='filterProductsAndProductListContainer'>\n\t\t\t\t\t<Filter productType={ productType }\n\t\t\t\t\t\t    handleProductTypeChange={ handleProductTypeChange }></Filter>\n\t\t\t\t\t<ProductList productsAndAvailabilities={ productsAndAvailabilities }\n\t\t\t\t\t\t\t\t productType={ productType }></ProductList>\n\t\t\t\t</div>\n\t\t\t)\n\t\t} else return <p>Loading product data. Please wait.</p>\n\t}\n\n\treturn (\n\t\t<div id='appContainer'>\n\t\t\t<h1>Product list</h1>\n\t\t\t{ renderIfThereIsProductData() }\n\t\t</div>\n\t)\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render( <App />, document.getElementById( 'root' ) )"],"sourceRoot":""}