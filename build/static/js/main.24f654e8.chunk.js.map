{"version":3,"sources":["App.js","index.js"],"names":["App","baseUrl","useState","products","setProducts","productManufacturers","setProductManufacturers","useEffect","console","log","Promise","all","axios","get","then","response","allProducts","forEach","push","data","allManufacturers","productsArray","manufacturers","manufacturer","indexOf","findManufacturers","concat","map","product","undefined","glove","id","name","color","price","ReactDOM","render","document","getElementById"],"mappings":"wOAoIeA,EAjIH,WACX,IAAMC,EAAU,+CADC,EAGiBC,mBAAU,IAH3B,mBAGTC,EAHS,KAGCC,EAHD,OAIyCF,mBAAU,IAJnD,mBAITG,EAJS,KAIaC,EAJb,KAoBjBC,qBAAW,WACVC,QAAQC,IAAK,uDAAwDJ,GAErEK,QACEC,IAAK,CACLC,IAAMC,IAAN,UAAcZ,EAAd,sBACAW,IAAMC,IAAN,UAAcZ,EAAd,yBACAW,IAAMC,IAAN,UAAcZ,EAAd,yBAEAa,MAAM,SAAAC,GAAa,IAAD,EAClBP,QAAQC,IAAK,gBAAiBM,GAE9B,IAAMC,EAAc,GAEpBD,EAASE,SAAS,SAAAd,GACjBa,EAAYE,KAAMf,EAASgB,SAI5Bf,EAAaY,GAGb,IAAMI,EAlCiB,SAAAC,GACzB,IAD0C,EACpCC,EAAgB,GADoB,cAEhBD,GAFgB,IAE1C,2BAA0C,CAAC,IAAjCE,EAAgC,SACO,IAA3CD,EAAcE,QAASD,IAC3BD,EAAcJ,KAAMK,IAJoB,8BAQ1C,OAAOD,EA0BoBG,EACxB,MAAGC,OAAH,QAAcV,GAAcW,KAAK,SAAAC,GAAO,OAAIA,EAAQL,iBACrDjB,EAAyBc,GAEzBZ,QAAQC,IAAK,+DAAgEJ,QAE7E,IAEHG,QAAQC,IAAK,yCAA0CJ,GA4DvD,OAOC,cANA,CAMA,iBACC,gCACC,4CACA,+CACA,gDAED,4BA1CmBwB,IAAhB1B,EAAS,GAEX,kCACC,gCACC,+BACC,oCACA,8CACA,uCACA,8CACA,uCACA,mDAGF,gCACGA,EAAS,GAAGwB,KAAK,SAAAG,GAAK,OACvB,+BACC,6BAAuBA,EAAMC,IAAnBD,EAAMC,IAChB,6BAAyBD,EAAME,MAArBF,EAAME,MAChB,6BAA0BF,EAAMG,MAAMN,KAAK,SAAAM,GAAK,gBAAOA,EAAP,SAAtCH,EAAMG,OAChB,6BAAiCH,EAAMP,cAA7BO,EAAMP,cAChB,6BAA0BO,EAAMI,OAAtBJ,EAAMI,SALPJ,EAAMC,YAWP,+CC1GhBI,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAgB,W","file":"static/js/main.24f654e8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst App = () => {\n\tconst baseUrl = 'https://reaktor-2021-duukkis8d.herokuapp.com'\n\t\n\tconst [ products, setProducts ] = useState( [] )\n\tconst [ productManufacturers, setProductManufacturers ] = useState( [] )\n\t//const [ gloveAvailability, setGloveAvailability ] = useState( Map )\n\n\t// Finds unique manufacturers from a long list with many duplicants.\n\tconst findManufacturers = productsArray => {\n\t\tconst manufacturers = []\n\t\tfor ( let manufacturer of productsArray ) {\n\t\t\tif ( manufacturers.indexOf( manufacturer ) === -1 ) {\n\t\t\t\tmanufacturers.push( manufacturer )\n\t\t\t}\n\t\t}\n\n\t\treturn manufacturers\n\t}\n\n\t// Gets all products.\n\tuseEffect( () => {\n\t\tconsole.log( 'productManufacturers in the beginning of useEffect: ', productManufacturers )\n\n\t\tPromise\n\t\t\t.all( [\n\t\t\t\taxios.get( `${baseUrl}/?category=gloves` ),\n\t\t\t\taxios.get( `${baseUrl}/?category=facemasks` ),\n\t\t\t\taxios.get( `${baseUrl}/?category=beanies` )\n\t\t\t] )\n\t\t\t.then( response => {\n\t\t\t\tconsole.log( 'all products:', response )\n\n\t\t\t\tconst allProducts = []\n\n\t\t\t\tresponse.forEach( products => {\n\t\t\t\t\tallProducts.push( products.data )\n\t\t\t\t} )\n\n\t\t\t\t// allProducts contains [0]: gloves, [1]: facemasks, [2]: beanies\n\t\t\t\tsetProducts( allProducts )\n\n\t\t\t\t// Spreading 2-dimensional array to 1 dimension.\n\t\t\t\tconst allManufacturers = findManufacturers( \n\t\t\t\t\t[].concat( ...allProducts ).map( product => product.manufacturer ) )\n\t\t\t\tsetProductManufacturers( allManufacturers )\n\n\t\t\t\tconsole.log( 'productManufacturers after the server response and setters: ', productManufacturers )\n\t\t\t} )\n\t}, [] )\n\n\tconsole.log( 'productManufacturers after useEffect: ', productManufacturers )\n\n\t/*\n\tconst gloveAvailabilityPromises = new Map()\n\tconst gloveAvailability = gloveManufacturers => {  \n\t\tgloveManufacturers.forEach( manufacturer => {\n\t\t\tgloveAvailabilityPromises.set( manufacturer, axios.get( `${this.baseUrl}/availability/${manufacturer}` ) )\n\t\t\tconsole.log( manufacturer )\n\t\t} )\n\n\t\treturn gloveAvailabilityPromises\n\t}\n\t*/\n\n\t// How to keep manufacturer information during HTTP requests? I need to know which HTTP response is for which\n\t// manufacturer. Perhaps copying the keys from gloveAvailabilityPromises Map to gloveAvailabilityData Map...\n\t/*\n\tconst gloveAvailabilityData = new Map()\n\tPromise\n\t\t.all( gloveAvailability( this.state.gloveManufacturers ) )\n\t\t.then( results => {\n\t\t\tresults.forEach( response => {\n\t\t\t\tconsole.log( response.data )\n\t\t\t\tgloveAvailabilityData.set( response.data )\n\t\t\t} )\n\t\t} )\n\t*/\n\n\t// Then set availability data to App state. No code yet...\n\n\tconst renderGloves = () => {\n\t\tif( products[0] !== undefined ) {\n\t\t\treturn (\n\t\t\t\t<table>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>id</th>\n\t\t\t\t\t\t\t<th>product name</th>\n\t\t\t\t\t\t\t<th>color</th>\n\t\t\t\t\t\t\t<th>manufacturer</th>\n\t\t\t\t\t\t\t<th>price</th>\n\t\t\t\t\t\t\t<th>availability</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{ products[0].map( glove => \n\t\t\t\t\t\t\t<tr key={ glove.id }>\n\t\t\t\t\t\t\t\t<td key={ glove.id }>{ glove.id }</td>\n\t\t\t\t\t\t\t\t<td key={ glove.name }>{ glove.name }</td>\n\t\t\t\t\t\t\t\t<td key={ glove.color }>{ glove.color.map( color => `${color} ` ) }</td>\n\t\t\t\t\t\t\t\t<td key={ glove.manufacturer }>{ glove.manufacturer }</td>\n\t\t\t\t\t\t\t\t<td key={ glove.price }>{ glove.price }</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t)\n\t\t} else return <p>Loading...</p>\n\t}\n\n\treturn (\n\t\t/*\n\t\tThis table code should be in its own component ProductList. Product type (glove, facemask or beanie) could\n\t\tbe passed as props to the component. Now only gloves get rendered and there is no availability information.\n\t\tProduct availability information could be found with using correct manufacturer in the HTTP request url and \n\t\tthen searching with specific product id.\n\t\t*/\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t<button>gloves</button>\n\t\t\t\t<button>facemasks</button>\n\t\t\t\t<button>beanies</button>\n\t\t\t</div>\n\t\t\t<br></br>\n\t\t\t{ renderGloves() }\n\t\t</div>\n\t)\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render( <App />, document.getElementById( 'root' ) )"],"sourceRoot":""}