{"version":3,"sources":["App.js","index.js"],"names":["App","props","baseUrl","glovesUrl","state","gloves","gloveManufacturers","gloveAvailability","Map","axios","get","this","then","response","allManufacturers","manufacturers","manufacturer","indexOf","push","findManufacturers","data","map","glove","setState","gloveAvailabilityPromises","gloveAvailabilityData","Promise","all","forEach","set","console","log","results","id","name","color","price","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0QAoGeA,E,kDA/Fd,WAAaC,GAAS,IAAD,8BACpB,cAAOA,IACFC,QAAU,4CAEf,EAAKC,UAAL,UAAoB,EAAKD,QAAzB,oBAEA,EAAKE,MAAQ,CACZC,OAAQ,GACRC,mBAAoB,GACpBC,kBAAmBC,KATA,E,gEAaA,IAAD,OAcnBC,IACEC,IAAKC,KAAKR,WACVS,MAAM,SAAAC,GACN,IAAMC,EAfkB,SAAAT,GACzB,IADmC,EAC7BU,EAAgB,GADa,cAETV,GAFS,IAEnC,2BAAmC,CAAC,IAA1BW,EAAyB,SACc,IAA3CD,EAAcE,QAASD,IAC3BD,EAAcG,KAAMF,IAJa,8BAQnC,OAAOD,EAOmBI,CAAmBN,EAASO,KAAKC,KAAK,SAAAC,GAAK,OAAIA,EAAMN,iBAC9E,EAAKO,SAAU,CACdlB,OAAQQ,EAASO,KACjBd,mBAAoBQ,OAIvB,IAC0BR,EADpBkB,EAA4B,IAAIhB,IAYhCiB,EAAwB,IAAIjB,IAClCkB,QACEC,KAbwBrB,EAaAK,KAAKP,MAAME,mBAZpCA,EAAmBsB,SAAS,SAAAZ,GAC3BQ,EAA0BK,IAAKb,EAAcP,IAAMC,IAAN,UAAc,EAAKR,QAAnB,yBAA2Cc,KACxFc,QAAQC,IAAKf,MAGPQ,IAQNZ,MAAM,SAAAoB,GACNA,EAAQJ,SAAS,SAAAf,GAChBiB,QAAQC,IAAKlB,EAASO,MACtBK,EAAsBI,IAAKhB,EAASO,c,+BAQvC,OAKC,cAJA,CAIA,mBACC,gCACC,+BACC,oCACA,8CACA,uCACA,8CACA,uCACA,mDAGF,gCACGT,KAAKP,MAAMC,OAAOgB,KAAK,SAAAC,GAAK,OAC7B,+BACC,6BAAuBA,EAAMW,IAAnBX,EAAMW,IAChB,6BAAyBX,EAAMY,MAArBZ,EAAMY,MAChB,6BAA0BZ,EAAMa,MAAMd,KAAK,SAAAc,GAAK,gBAAOA,EAAP,SAAtCb,EAAMa,OAChB,6BAAiCb,EAAMN,cAA7BM,EAAMN,cAChB,6BAA0BM,EAAMc,OAAtBd,EAAMc,SALPd,EAAMW,gB,GAlFJI,IAAMC,WCAxBC,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAgB,W","file":"static/js/main.cbabe74a.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\n\n// The app only gets glove data now.\nclass App extends React.Component {\n\tconstructor( props ) {\n\t\tsuper( props )\n\t\tthis.baseUrl = 'https://bad-api-assignment.reaktor.com/v2' // CORS error occurs\n\t\t//this.baseUrl = 'https://bad-api-assignment.reaktor.com'\n\t\tthis.glovesUrl = `${this.baseUrl}/products/gloves` // CORS error occurs\n\t\t//this.glovesUrl = `${this.baseUrl}/products/jackets`\n\t\tthis.state = {\n\t\t\tgloves: [],\n\t\t\tgloveManufacturers: [],\n\t\t\tgloveAvailability: Map\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\t// Finds unique manufacturers from a long list with many duplicants.\n\t\tconst findManufacturers = gloves => {\n\t\t\tconst manufacturers = []\n\t\t\tfor ( let manufacturer of gloves ) {\n\t\t\t\tif ( manufacturers.indexOf( manufacturer ) === -1 ) {\n\t\t\t\t\tmanufacturers.push( manufacturer )\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\treturn manufacturers\n\t\t}\n\n\t\t// Gets all gloves.\n\t\taxios\n\t\t\t.get( this.glovesUrl )\n\t\t\t.then( response => {\n\t\t\t\tconst allManufacturers = findManufacturers( response.data.map( glove => glove.manufacturer ) )\n\t\t\t\tthis.setState( { \n\t\t\t\t\tgloves: response.data,\n\t\t\t\t\tgloveManufacturers: allManufacturers\n\t\t\t\t} )\n\t\t\t} )\n\n\t\tconst gloveAvailabilityPromises = new Map()\n\t\tconst gloveAvailability = gloveManufacturers => {  \n\t\t\tgloveManufacturers.forEach( manufacturer => {\n\t\t\t\tgloveAvailabilityPromises.set( manufacturer, axios.get( `${this.baseUrl}/availability/${manufacturer}` ) )\n\t\t\t\tconsole.log( manufacturer )\n\t\t\t} )\n\n\t\t\treturn gloveAvailabilityPromises\n\t\t}\n\n\t\t// How to keep manufacturer information during HTTP requests? I need to know which HTTP response is for which\n\t\t// manufacturer. Perhaps copying the keys from gloveAvailabilityPromises Map to gloveAvailabilityData Map...\n\t\tconst gloveAvailabilityData = new Map()\n\t\tPromise\n\t\t\t.all( gloveAvailability( this.state.gloveManufacturers ) )\n\t\t\t.then( results => {\n\t\t\t\tresults.forEach( response => {\n\t\t\t\t\tconsole.log( response.data )\n\t\t\t\t\tgloveAvailabilityData.set( response.data )\n\t\t\t\t} )\n\t\t\t} )\n\n\t\t// Then set availability data to App state. No code yet...\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t// This table code should be in its own component ProductList. Product type (glove, facemask or beanie) could\n\t\t\t// be passed as props to the component. Now only gloves get rendered and there is no availability information.\n\t\t\t// Product availability information could be found with using correct manufacturer in the HTTP request url and \n\t\t\t// then searching with specific product id.\n\t\t\t<table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>id</th>\n\t\t\t\t\t\t<th>product name</th>\n\t\t\t\t\t\t<th>color</th>\n\t\t\t\t\t\t<th>manufacturer</th>\n\t\t\t\t\t\t<th>price</th>\n\t\t\t\t\t\t<th>availability</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{ this.state.gloves.map( glove => \n\t\t\t\t\t\t<tr key={ glove.id }>\n\t\t\t\t\t\t\t<td key={ glove.id }>{ glove.id }</td>\n\t\t\t\t\t\t\t<td key={ glove.name }>{ glove.name }</td>\n\t\t\t\t\t\t\t<td key={ glove.color }>{ glove.color.map( color => `${color} ` ) }</td>\n\t\t\t\t\t\t\t<td key={ glove.manufacturer }>{ glove.manufacturer }</td>\n\t\t\t\t\t\t\t<td key={ glove.price }>{ glove.price }</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t) }\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t)\n\t}\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render( <App />, document.getElementById( 'root' ) )"],"sourceRoot":""}