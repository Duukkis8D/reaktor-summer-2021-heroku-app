{"version":3,"sources":["App.js","index.js"],"names":["App","glovesUrl","useState","glovesArray","setGloves","gloveManufacturersArray","setGloveManufacturers","useEffect","axios","get","then","response","allManufacturers","findManufacturers","data","map","glove","manufacturer","console","log","gloves","manufacturers","indexOf","push","id","name","color","price","ReactDOM","render","document","getElementById"],"mappings":"yOAgGeA,EA5FH,WACX,IACMC,EAAS,UADC,+CACD,wBAFE,EAIkBC,mBAAU,IAJ5B,mBAITC,EAJS,KAIIC,EAJJ,OAK0CF,mBAAU,IALpD,mBAKTG,EALS,KAKgBC,EALhB,KASjBC,qBAAW,WACVC,IACEC,IAAKR,GACLS,MAAM,SAAAC,GACN,IAAMC,EAAmBC,EAAmBF,EAASG,KAAKC,KAAK,SAAAC,GAAK,OAAIA,EAAMC,iBAE9Eb,EAAWO,EAASG,MACpBR,EAAuBM,GACvBM,QAAQC,IAAKd,QAEb,IAGH,IAAMQ,EAAoB,SAAAO,GACzB,IADmC,EAC7BC,EAAgB,GADa,cAETD,GAFS,IAEnC,2BAAmC,CAAC,IAA1BH,EAAyB,SACc,IAA3CI,EAAcC,QAASL,IAC3BI,EAAcE,KAAMN,IAJa,8BAQnC,OAAOI,GA+BR,OAKC,cAJA,CAIA,mBACC,gCACC,+BACC,oCACA,8CACA,uCACA,8CACA,uCACA,mDAGF,gCACGlB,EAAYY,KAAK,SAAAC,GAAK,OACvB,+BACC,6BAAuBA,EAAMQ,IAAnBR,EAAMQ,IAChB,6BAAyBR,EAAMS,MAArBT,EAAMS,MAChB,6BAA0BT,EAAMU,MAAMX,KAAK,SAAAW,GAAK,gBAAOA,EAAP,SAAtCV,EAAMU,OAChB,6BAAiCV,EAAMC,cAA7BD,EAAMC,cAChB,6BAA0BD,EAAMW,OAAtBX,EAAMW,SALPX,EAAMQ,aC/ErBI,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAgB,W","file":"static/js/main.56506bd8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\n// The app only gets glove data now.\nconst App = () => {\n\tconst baseUrl = 'https://reaktor-2021-duukkis8d.herokuapp.com'\n\tconst glovesUrl = `${baseUrl}/api/products/gloves`\n\t//const glovesUrl = 'http://localhost:3001/api/products/gloves'\n\tconst [ glovesArray, setGloves ] = useState( [] )\n\tconst [ gloveManufacturersArray, setGloveManufacturers ] = useState( [] )\n\t//const [ gloveAvailability, setGloveAvailability ] = useState( Map )\n\n\t// Gets all gloves.\n\tuseEffect( () => {\n\t\taxios\n\t\t\t.get( glovesUrl )\n\t\t\t.then( response => {\n\t\t\t\tconst allManufacturers = findManufacturers( response.data.map( glove => glove.manufacturer ) )\n\n\t\t\t\tsetGloves( response.data )\n\t\t\t\tsetGloveManufacturers( allManufacturers )\n\t\t\t\tconsole.log( gloveManufacturersArray ) // findManufacturers function is skipped?\n\t\t\t} )\n\t}, [] )\n\n\t// Finds unique manufacturers from a long list with many duplicants.\n\tconst findManufacturers = gloves => {\n\t\tconst manufacturers = []\n\t\tfor ( let manufacturer of gloves ) {\n\t\t\tif ( manufacturers.indexOf( manufacturer ) === -1 ) {\n\t\t\t\tmanufacturers.push( manufacturer )\n\t\t\t}\n\t\t}\n\t\n\t\treturn manufacturers\n\t}\n\n\t/*\n\tconst gloveAvailabilityPromises = new Map()\n\tconst gloveAvailability = gloveManufacturers => {  \n\t\tgloveManufacturers.forEach( manufacturer => {\n\t\t\tgloveAvailabilityPromises.set( manufacturer, axios.get( `${this.baseUrl}/availability/${manufacturer}` ) )\n\t\t\tconsole.log( manufacturer )\n\t\t} )\n\n\t\treturn gloveAvailabilityPromises\n\t}\n\t*/\n\n\t// How to keep manufacturer information during HTTP requests? I need to know which HTTP response is for which\n\t// manufacturer. Perhaps copying the keys from gloveAvailabilityPromises Map to gloveAvailabilityData Map...\n\t/*\n\tconst gloveAvailabilityData = new Map()\n\tPromise\n\t\t.all( gloveAvailability( this.state.gloveManufacturers ) )\n\t\t.then( results => {\n\t\t\tresults.forEach( response => {\n\t\t\t\tconsole.log( response.data )\n\t\t\t\tgloveAvailabilityData.set( response.data )\n\t\t\t} )\n\t\t} )\n\t*/\n\n\t// Then set availability data to App state. No code yet...\n\n\treturn (\n\t\t// This table code should be in its own component ProductList. Product type (glove, facemask or beanie) could\n\t\t// be passed as props to the component. Now only gloves get rendered and there is no availability information.\n\t\t// Product availability information could be found with using correct manufacturer in the HTTP request url and \n\t\t// then searching with specific product id.\n\t\t<table>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>id</th>\n\t\t\t\t\t<th>product name</th>\n\t\t\t\t\t<th>color</th>\n\t\t\t\t\t<th>manufacturer</th>\n\t\t\t\t\t<th>price</th>\n\t\t\t\t\t<th>availability</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t{ glovesArray.map( glove => \n\t\t\t\t\t<tr key={ glove.id }>\n\t\t\t\t\t\t<td key={ glove.id }>{ glove.id }</td>\n\t\t\t\t\t\t<td key={ glove.name }>{ glove.name }</td>\n\t\t\t\t\t\t<td key={ glove.color }>{ glove.color.map( color => `${color} ` ) }</td>\n\t\t\t\t\t\t<td key={ glove.manufacturer }>{ glove.manufacturer }</td>\n\t\t\t\t\t\t<td key={ glove.price }>{ glove.price }</td>\n\t\t\t\t\t</tr>\n\t\t\t\t) }\n\t\t\t</tbody>\n\t\t</table>\n\t)\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render( <App />, document.getElementById( 'root' ) )"],"sourceRoot":""}